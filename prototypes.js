//Прототип - это объект, который присутствует у объекта и он вызывается по цепочке "сверху вниз"
//Прототипы - это механизм, с помощью которого объекты JavaScript наследуют свойства друг от друга. (определение из mdn)
//https://developer.mozilla.org/ru/docs/Learn/JavaScript/Objects/Object_prototypes

//Обычный способ создания объекта
//const person = {
//  name: 'Timur',
//  age: 26,
//  greet: function() {
//    console.log('Greet!')
//  }
//}

//В данном примере мы создаём объект используя функцию 'new', т.е. мы вносим в переменную 'person' пример нашего глобального объекта с нашими кастомными параметрами 
const person = new Object({
  name: 'Timur',
  age: 26,
  greet: function() {
    console.log('Greet!')
  }
})

//Мы можем внести в прототип объекта новую функцию следующим способом. Таким образом, мы расширили базовый прототип класса 'Object' и добавили в него новый метод
Object.prototype.sayHello = function () {
  console.log('Hello!')
}

//С помощью глобального метода Object.create мы можем задать прототип объекту и внести его в новую переменную, таким образом, в данном примере мы задали person как прототип для нового объекта Ksusha, т.е. объект 'Ksusha' будет иметь унаследованные методы от прототипа 'person'. В итоге, person стал прототипом для объекта 'Ksusha'
const Ksusha = Object.create(person)
//Наш новый объект на данный момент пуст и при вызове name браузер перейдёт к прототипу, найдет значение 'Timur' и выдаст его. Но мы хотим создать собственное имя для объекта 'Ksusha'. Сделаем это:
Ksusha.name = 'Ksusha' //так мы можем внести параметры в объект

//const str = 'I am string' //так всё выглядит снаружи
const str = new String('I am string') //вот что происходит "за кулисами JS". C помощью глобального метода создаётся новая строка (которая, как и всё в JS является объектом со своими свойствами)