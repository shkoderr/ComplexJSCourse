//Async functions - https://www.youtube.com/watch?v=vIZs5tH-HGQ&list=PLqKQF2ojwm3l4oPjsB9chrJmlhZ-zOzWT&index=7
console.log('Start')

console.log('Start2')

//N.B. функция setTimeOut не входит в спецификацию JS, а является браузерным API, 1-м параметром принимает функцию, а 2-м - время, через которая данная функция сработает.
window.setTimeout(function () { //бразуер регистрирует данную функцию и ждёт 2 секунды прежде чем выполнить её
  console.log('After 5 seconds')
}, 5000)

console.log('End') //Однако, выполнение скрипта не блокируется, а программа сразу бежит дальше и выполняет весь синхронный код, таким образом, эта запись будет выведена перед асинхронной функцией

//Также мы можем передать в функцию setTimeOut ссылку на другую функцию, вот пример: 
function timeout2sec() {
  console.log('After 2 seconds')
}

setTimeout(timeout2sec, 2000); //передали 1-ым параметром вместо функции, название другой функции


//JavaScript имеет однопоточную модель выполнения, что означает, что он может обрабатывать только одну задачу за раз. Цикл событий (Event Loop) — это механизм в JavaScript, который обрабатывает асинхронное выполнение кода. Цикл событий работает, постоянно проверяя очередь сообщений на наличие новых сообщений (т. е. задач) и добавляя их в стек для выполнения. Когда стек пуст, цикл событий продолжает прослушивать новые сообщения и выполнять их по мере их поступления. Таким образом, цикл обработки событий гарантирует, что код JavaScript выполняется неблокирующим образом, что позволяет приложению реагировать на действия пользователя и другие события.
//MDN https://developer.mozilla.org/ru/docs/Web/JavaScript/EventLoop
//LearnJavaScript: https://learn.javascript.ru/event-loop 